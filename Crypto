import java.util.*;
public class ModuleProjectCrypto {
    public static void main(String[] args){
        Scanner input = new Scanner(System.in);

        String normalizedText = normalizeText("This is some \nreally\" great. (Text)!?");

        System.out.println("The normalized string is:" +normalizedText);

        System.out.print("Please give a shift key value: ");
        //takes in a shit key
        int key = input.nextInt();

        String encryptedString = caesarify(normalizedText,key);
        System.out.println("The encrypted string is:"+encryptedString);

        System.out.print("Please type a number to group the encrypted string: ");
        int groupNumber = input.nextInt();
        String groupString = groupify(encryptedString,groupNumber);
        System.out.println(groupify(encryptedString,groupNumber));

        // ungroupify

        String cyphertext = encryptedString;
        String ungroupString = ungroupify(cyphertext);
        System.out.println("Ungroupified string is:" + ungroupString);

        //decryption

        String plainString = decryptString(ungroupString, key);
        System.out.println("The decrypted plain string is: " +plainString);
}

    public static String normalizeText(String str){

        str = str.replaceAll("\\s+", "");

        //remove any punctuation(.,:;'"!?())

        str = str.replaceAll("[.,:;'\"!?()]", "");


        str = str.toUpperCase();
        return str;
    }

    public static String caesarify(String str, int key){
        String cipherText = "";
        String  shiftAl = shiftAlphabet(key);
        System.out.println("Shift Alphabet is: "+shiftAl);

        char alphabet;
        String sChar = "";
        for(int i = 0; i <str.length(); i++){
            alphabet = str.charAt(i);
            char returnedAlphabet ;
            int indexOffAlphabet = shiftAl.indexOf(alphabet);
           // get the new index of position after shift in the shift alphabet
           int newIndexOfShiftAl = indexOffAlphabet + key;

            //System.out.println(newIndexOfShiftAl); check new index

            if(newIndexOfShiftAl > 26){
                newIndexOfShiftAl = newIndexOfShiftAl % 26;
                returnedAlphabet = shiftAl.charAt(newIndexOfShiftAl);

                //turn char to String
                 sChar = String.valueOf(returnedAlphabet);
            }else if(newIndexOfShiftAl < 26){
                returnedAlphabet = shiftAl.charAt(newIndexOfShiftAl);
                 sChar = String.valueOf(returnedAlphabet);
            }

            cipherText += sChar;
        }
        return cipherText;
    }

    public static String shiftAlphabet(int shift) {
        int start = 0;
        if (shift < 0) {
            start = (int) 'Z' + shift + 1;
        } else {
            start = 'A' + shift;
        }
        String result = "";
        char currChar = (char) start;
        for(; currChar <= 'Z'; ++currChar) {
            result = result + currChar;
        }
        if(result.length() < 26) {
            for(currChar = 'A'; result.length() < 26; ++currChar) {
                result = result + currChar;
            }
        }
        return result;
    }

    // group the encrypted string
    public static String groupify(String str, int a) {
        String groupedString = "";
        int len = str.length();
        if(len % a == 0) {
            // create a recursion groupMethodOne instead of for loop
            groupedString = groupMethodFirst(str, a);

        }else{
           // for(int i = 0; i < (len- len%a); i= i +a ){
           //     groupedString += str.substring(i, i + a) + " ";

            // create a secondgroupMethod recursion to group the first len - len%a chars
                groupedString = secondGroupMethod(str, a);

                groupedString += str.substring((len - len%a))+paddingX(a-len%a);
            }

        return groupedString;

        }

    // method X to add (a-len%a) padding x
    public static String paddingX(int n){
        String paddingX = "";
        for(int i = 0; i < n ; i++){
            paddingX += "x";
        }
        return paddingX;
    }

    public static String groupMethodFirst(String s, int a){
        if (s.length() == 0)
            return "";
        return s.substring(0,a) + " " + groupMethodFirst(s.substring(a,(s.length() -1)), a);
    }

    public static String secondGroupMethod(String s, int a){
        int len = s.length();
        if((len-a) == 0)
            return "";
        return s.substring(0, a) +" " + secondGroupMethod(s.substring(a,(len - len % a)), a);

    }

    public static String ungroupify(String str){
        str = str.replaceAll("\\s+", "");
        str = str.replaceAll("x","");
        return str;
    }

    public static String decryptString(String str, int a){
        int len = str.length();
        String  shiftAl = shiftAlphabet(a);
        String sChar = "";
        String plainString = "";
        for(int i = 0; i< len; i++){
            char ch = str.charAt(i);
            int indexInshiftAl = (shiftAl.indexOf(ch));
            // get new index after subtract key value a
            int plaintextIndex = (indexInshiftAl - a);
            if(plaintextIndex > 0){
                char plaintext = shiftAl.charAt(plaintextIndex);
                // turn char to string,in order to conjoin
                sChar = String.valueOf(plaintext);
            }else if ( plaintextIndex < 0){
                plaintextIndex = plaintextIndex + 26;
                char plaintext = shiftAl.charAt(plaintextIndex);
                // turn char to string,in order to conjoin
                sChar = String.valueOf(plaintext);
            }
            plainString += sChar;
        }

        return  plainString;
    }
}



